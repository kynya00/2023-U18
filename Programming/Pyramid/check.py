PYRAMID = '''                             13
                            35 47
                           18 94 22
                          23 31 77 13
                         39 68 62 12 34
                        59 98 83 57 45 77
                       55 41 57 87 87 59 55
                      28 16 88 93 55 83 10 28
                     85 82 29 79 91 63 48 36 63
                    17 10 51 57 24 89 21 21 36 42
                   95 37 46 35 87 73 99 38 21 68 49
                  20 71 47 52 99 82 59 89 34 11 42 16
                 29 13 29 14 14 50 66 55 66 15 27 68 50
                75 11 77 48 69 73 42 79 42 42 12 87 83 73
               79 20 79 29 40 15 85 62 85 50 27 30 48 78 34
              78 72 39 91 73 98 54 55 40 35 72 11 15 63 40 10
             14 41 22 17 54 14 99 78 38 95 87 72 14 33 58 67 97
            24 34 62 38 37 67 82 99 48 53 25 94 94 14 22 48 44 91
           42 83 88 52 89 42 96 77 83 44 73 63 96 81 73 52 60 44 19
          36 27 46 55 52 70 62 10 24 34 24 72 52 65 27 78 67 72 77 63
         54 43 11 29 41 97 30 48 98 40 71 85 76 84 94 48 84 98 58 93 13
        13 70 22 41 63 82 51 94 20 56 55 83 30 86 84 74 32 24 13 52 71 88
       28 14 75 78 83 61 50 49 48 80 63 34 36 14 42 91 28 83 55 27 72 80 94
      55 51 58 51 58 65 86 18 42 90 16 62 10 51 39 12 66 12 31 45 73 52 30 20
     65 89 49 99 33 17 90 64 63 59 89 60 87 51 99 38 97 80 21 12 42 76 10 55 26
    20 26 43 92 30 95 61 29 23 62 84 75 49 91 67 73 24 20 50 67 59 54 44 34 37 37
   47 97 94 34 30 94 93 12 52 68 22 95 82 92 42 15 44 64 67 97 39 57 34 31 38 77 41
  10 50 80 17 21 57 94 82 52 53 63 77 17 35 15 62 41 78 45 16 90 31 61 25 36 68 52 79
 40 35 35 92 68 19 53 26 69 72 81 66 49 54 47 70 11 85 79 77 93 86 70 84 58 26 97 79 17
18 54 36 15 31 47 86 36 72 65 91 77 79 41 57 19 73 11 42 46 89 16 50 14 70 80 63 34 86 68'''

ROWS = 30

def calculate_max_path_sum(triangle: str) -> int:
  triangle_list: list = []
  for _ in triangle.split('\n'):
    triangle_list.append([num for num in _.split(' ') if num != ''])
  #triangle_list = triangle_list[:-1]

  for _ in triangle_list:
    while len(_) < ROWS:
      _.append('0')

  dp = [[-1 for j in range(ROWS)] for i in range(ROWS)]
  return max_path_sum(triangle_list, ROWS, dp)

def max_path_sum(tri: list, n: int, dp: list): 
  for j in range(n):
    dp[n-1][j] = tri[n-1][j]
 
  for i in range(n-2, -1, -1):
    for j in range(i, -1, -1):
      dp[i][j] = tri[i][j] + max(dp[i+1][j], dp[i+1][j+1])
 
  return dp[0][0]

print(calculate_max_path_sum(PYRAMID))
